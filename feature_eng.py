# -*- coding: utf-8 -*-
"""feature.eng

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aZyjo5stTmhq777ghFIRb1NI2boADbon
"""

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/train_extended.csv',usecols=[2,3,4])
df.columns=['Length', 'Diameter', 'Height']
df

from sklearn.preprocessing import StandardScaler
scalar = StandardScaler(df)
scalar.fit(x_train)

sns.kdeplot(df['Length'])

sns.boxplot(df['Length'])

Q1 = df['Length'].quantile(0.25)

Q3 = df['Length'].quantile(0.75)

IQR = Q3 - Q1

upper_limit = Q3 + 1.5 * IQR

lower_limit = Q1 - 1.5 * IQR

length_outlier = df[(df['Length'] < lower_limit) | (df['Length'] > upper_limit)]

print(f'upper_limit = {upper_limit}')

print(f'lower_limit = {lower_limit}')

print(f'total number of outliers in lenght = {len(length_outlier)}')

length_outlier

sns.boxplot(df['Diameter'])

Q1 = df['Diameter'].quantile(0.25)

Q3 = df['Diameter'].quantile(0.75)

QR = Q3 - Q1

upper_limit = Q3 + 1.5 * IQR

lower_limit = Q1 - 1.5 * IQR

Diameter_outlier = df[(df['Diameter'] < lower_limit) | (df['Diameter'] > upper_limit)]

print(f'upper_limit = {upper_limit}')

print(f'lower_limit = {lower_limit}')

print(f'total number of outliers in diameter = {len(Diameter_outlier)}')

sns.kdeplot(df['Height'])

sns.boxplot(df['Height'])

Q1 = df['Height'].quantile(0.25)

Q3 = df['Height'].quantile(0.75)

IQR = Q3 - Q1


upper_limit = Q3 + 1.5 * IQR

lower_limit = Q1 - 1.5 * IQR

length_outlier = df[(df['Height'] < lower_limit) | (df['Height'] > upper_limit)]

print(f'upper_limit = {upper_limit}')

print(f'lower_limit = {lower_limit}')

print(f'total number of outliers in height = {len(length_outlier)}')