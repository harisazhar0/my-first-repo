# -*- coding: utf-8 -*-
"""H.project_EDA_Fea_Lin_pol

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qj4fTVyyeVzWQWARN1ajlHbkCo7uH-vM

**Data** **Collection**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Lung Cancer.csv')
df

"""**Exploratory Data Analysis (EDA)**"""

df.head()

df.tail()



df.shape

df.columns

df.info()

df.describe()

sns.heatmap(df.isnull(),cbar=True)
plt.title("Missing Values Heatmap")
plt.show()

for cols in df.columns:
  plt.subplot(1,2,1)
  sns.boxplot(df[cols])
  plt.show()
  print(len(df[cols]))

catagorical_cols = df.select_dtypes(include = ['object','category']).columns

numerical_cols = df.select_dtypes(include = ['int64', 'float64']).columns

for col in numerical_cols:
  plt.subplot(1,2,1)
  sns.kdeplot(df[col])
  plt.subplot(1,2,2)
  sns.boxplot(df[col])
  plt.show()

"""**FEATURE ENG**




"""

df.isnull().mean()

df['bmi'] = df['bmi'].fillna(df['bmi'].mean())
df['smoking_status'] = df['smoking_status'].fillna(df['smoking_status'].mode()[0])
df['cholesterol_level'] = df['cholesterol_level'].fillna(df['cholesterol_level'].mean())
df['hypertension'] = df['hypertension'].fillna(df['hypertension'].mean())
df['asthma'] = df['asthma'].fillna(df['asthma'].mean())
df['cirrhosis'] = df['cirrhosis'].fillna(df['cirrhosis'].mean())
df['cancer_stage'] = df['cancer_stage'].fillna('last')
df['other_cancer'] = df['other_cancer'].fillna(df['other_cancer'].mean())
df['treatment_type'] = df['treatment_type'].fillna('NaN')
df['end_treatment_date'] = df['end_treatment_date'].fillna('NaN')
df['survived'] = df['survived'].fillna(df['survived'].mode()[0])
df['family_history'] = df['family_history'].fillna('NaN')

df.isnull().sum()

df.drop_duplicates(inplace=True)

catagorical_cols

numerical_cols

outlier_dict = {}

for col in numerical_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Find outliers
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

    outlier_dict[col] = {
        'total_outliers': len(outliers),
    }

pd.DataFrame(outlier_dict)

df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

df['age']= df['age'].clip(lower=lower_bound, upper=upper_bound)
df['hypertension']= df['hypertension'].clip(lower=lower_bound, upper=upper_bound)
df['cirrhosis']= df['cirrhosis'].clip(lower=lower_bound, upper=upper_bound)
df['other_cancer']= df['other_cancer'].clip(lower=lower_bound, upper=upper_bound)
df['survived']= df['survived'].clip(lower=lower_bound, upper=upper_bound)

outlier_dict = {}

for col in numerical_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Find outliers
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

    outlier_dict[col] = {
        'total_outliers': len(outliers),
    }

pd.DataFrame(outlier_dict)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

for col in catagorical_cols:
   df[col] = le.fit_transform(df[col])
for col in numerical_cols:
   df[col] = le.fit_transform(df[col])

df[catagorical_cols].head()

df[numerical_cols].head()

df_encode = df.copy()

df_encode.head()

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
df_encode_scaled = ss.fit_transform(df_encode)

df_encode_scaled

from sklearn.preprocessing import OrdinalEncoder
ode = OrdinalEncoder()
df_trans = ode.fit_transform(df)
new_df = pd.DataFrame(df_trans, columns = df.columns)

new_df

df_trans

"""#####

***MODAL TRANING***

*###*
"""

plt.scatter(df['asthma'],df['cirrhosis'])
plt.xlabel('asthma')
plt.ylabel('cirrhosis')
plt.show()

from sklearn.model_selection import train_test_split
import pandas as pd

x = df.iloc[:,0:1]
y = df.iloc[:,-1]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size= 0.2,random_state= 20)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(x_train,y_train)

plt.scatter(x_train,y_train,color = 'red')
plt.plot(x_train,lr.predict(x_train),color = 'blue')
plt.xlabel('cirrhosis')
plt.ylabel('bmi')
plt.show()

from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

y_predict = lr.predict(x_test)

y_test.values

print('MSE =',mean_squared_error(y_test,y_predict))

print('MAE =',mean_absolute_error(y_test,y_predict))

print('r2 =',r2_score(y_test,y_predict))

print(y_test.head())
print(y_predict[:10])

corr = df.corr()
corr

