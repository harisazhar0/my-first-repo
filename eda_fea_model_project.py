# -*- coding: utf-8 -*-
"""EDA_fea_model_project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GbVb9NlWsmgPTr8zAEXblJ8S73ejFrvM
"""

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression,Ridge

from sklearn.metrics import mean_squared_error

from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error

from sklearn.preprocessing import PolynomialFeatures,StandardScaler

df = pd.read_csv('/content/AmesHousing.csv')   ## for read file to 'CSV'
df

df.head()  ##first five rows of dataset:::::::::::::

sns.histplot(df['SalePrice'])  ##show histplot of saleprice:::::::::::

plt.title('distribution of saleprice') ##for saleprice title::::::::::::::

plt.show()  ##for show plot::::::::::::::

pd.set_option('display.max_rows',None)   #for display all columns in output section:::::::::::

df.isnull().sum().sort_values(ascending=False)  ##display missing valus::::::::::

corr = df.select_dtypes(include = ['number']).corr()  ##for numerical columns in sale price::::::::::

corr['SalePrice'].sort_values()   ## checking correlation of saleprice:::::::::::::::::

df['TotalSF'] = df['Total Bsmt SF'] + df['1st Flr SF'] + df['2nd Flr SF']  ##Creating new feature by adding 4 columns

df['HomeAge'] = df['Year Built'] + df['Yr Sold'] + df['Year Remod/Add'] ##Creating new feature by adding 3 columns

top_feature = corr[corr > 0.6].drop('SalePrice').index.tolist()

print('Top_Feature:', top_feature)

len(top_feature)

sns.heatmap(correlation)  ##correlation heatmap of saleprice::::::::::::::::::::

sns.scatterplot(x='Gr Liv Area',y='SalePrice',data = df)

plt.title('outliers')

plt.show()

sns.scatterplot(x='TotalSF',y='SalePrice',data = df)

plt.title('outliers')

plt.show()

sns.scatterplot(x='HomeAge',y='SalePrice',data = df)

plt.title('outliers')

plt.show()

sns.scatterplot(x='Overall Qual',y='SalePrice',data = df)

plt.title('outliers')

plt.show()

df = df[['SalePrice','Gr Liv Area','Overall Qual','HomeAge','TotalSF']]

df.head()

df.isnull().mean()

df['TotalSF'] = df['TotalSF'].fillna(df['TotalSF'].mean())

df.isnull().sum()

x = df.drop("SalePrice", axis=1)
y = df['SalePrice']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)



lr = LinearRegression()

lr.fit(x_train,y_train)

y_predict = lr.predict(x_test)

y_test.values

print('MSE =',mean_squared_error(y_test,y_predict))

print('MAE =',mean_absolute_error(y_test,y_predict))

print('np.sqrt',np.sqrt(mean_squared_error(y_test,y_predict)))

print('R2 =',r2_score(y_test,y_predict))

ridge = Ridge(alpha=1.0)

ridge.fit(x_train,y_train)

y_predict = ridge.predict(x_test)

print('MSE =',mean_squared_error(y_test,y_predict))

print('MAE =',mean_absolute_error(y_test,y_predict))

print('np.sqrt',np.sqrt(mean_squared_error(y_test,y_predict)))

print('R2 =',r2_score(y_test,y_predict))

lasso = Lasso(alpha=0.5)

lasso.fit(x_train,y_train)

y_predict = lasso.predict(x_test)

print('MSE =',mean_squared_error(y_test,y_predict))

print('np.sqrt',np.sqrt(mean_squared_error(y_test,y_predict)))

print('R2 =',r2_score(y_test,y_predict))

print('MAE =',mean_absolute_error(y_test,y_predict))

